class Product

types
	public Title = seq of char;
	public Description = seq of char;
	public Subcategory = seq of char;
	public VolumeDiscounts =  map Quantity to Price;
	public Quantity = nat;
	public Price = rat;
	public Color = <White> | <Blue> | <Pink> | <Yellow> | <Orange> | <Black> | <Purple> | <Brown> | <Green> | <Gray> | <Red> | <None> ;
	
instance variables
  public title: Title;
  public description: Description;
  public price: Price;
  public subcategory: Subcategory;
  public quantities: map Color to Quantity := { <None> |-> 0};
  public volumeDiscounts: VolumeDiscounts := { |-> };
  public colors: set of Color := {<None>};
  
  inv card colors > 1 <=> <None> not in set colors;
  inv dom quantities = colors;

operations
	-- Create product without color
	public Product : Title * Description * Subcategory * Price  ==> Product
	Product(tit, des, cat, pr) == (
		subcategory := cat;
	  title := tit;
	  description := des;
	  price := pr;
	  return self;
	);
	
	-- Create product with color
	public Product : Title * Description * Subcategory * Price * map Color to Quantity ==> Product
	Product(tit, des, cat, pr, qties) == (
		subcategory := cat;
	  title := tit;
	  description := des;
	  price := pr;
	  quantities := qties;
	  colors := dom qties;
	  return self;
	);
		
	-- Set volume discounts
	public setVolumeDiscounts : VolumeDiscounts ==> ()
	setVolumeDiscounts(volDiscs) == (
		volumeDiscounts := volDiscs;
	);
	
	-- Remove from stock in products without color
	public removeFromStock: Quantity ==> ()
	removeFromStock(qty) == (
		quantities := quantities ++ {<None> |-> (quantities(<None>) - qty)};
	)
	pre colors = {<None>}
		and qty <= quantities(<None>);
	
	-- Add to stock in products without color
	public addToStock: Quantity ==> ()
	addToStock(qty) == (
		quantities := quantities ++ {<None> |-> (quantities(<None>) + qty)};
	)
	pre colors = {<None>};
	
	-- Remove from stock in products with color
	public removeFromStock: Color * Quantity ==> ()
	removeFromStock(color, qty) == (
		quantities := quantities ++ {color |-> (quantities(color) - qty)};
	)
	pre color in set colors
		and qty <= quantities(color);
	
	-- Add to stock in products with color
	public addToStock: Color * Quantity ==> ()
	addToStock(color, qty) == (
		quantities := quantities ++ {color |-> (quantities(color) + qty)};
	)
	pre color in set colors;

end Product
