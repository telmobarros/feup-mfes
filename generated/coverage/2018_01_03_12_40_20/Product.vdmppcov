class Product

types
	public Title = seq of char;
	public Description = seq of char;
	public Subcategory = seq of char;
	public VolumeDiscounts =  map Quantity to Price;
	public Quantity = nat;
	public Price = rat;
	public Color = <White> | <Blue> | <Pink> | <Yellow> | <Orange> | <Black> | <Purple> | <Brown> | <Green> | <Gray> | <Red> | <None> ;
	
instance variables
  public title: Title;
  public description: Description;
  public price: Price;
  public subcategory: Subcategory;
  public quantities: map Color to Quantity := { <None> |-> 0};
  public volumeDiscounts: VolumeDiscounts := { |-> };
  public colors: set of Color := {<None>};
  
  inv card colors > 0;
  inv <None> in set colors => card colors = 1;
  inv dom quantities = colors;

operations
	
	-- Create product with color
	public Product : Title * Description * Subcategory * Price * map Color to Quantity ==> Product
	Product(tit, des, cat, pr, qties) == (
		subcategory := cat;
	  title := tit;
	  description := des;
	  price := pr;
	  quantities := qties;
	  colors := dom qties;
	  return self;
	)
	pre
		if <None> in set (dom qties)
		then (dom qties) = {<None>}
		else qties <> { |-> };
		
	-- Set volume discounts
	public setVolumeDiscounts : VolumeDiscounts ==> ()
	setVolumeDiscounts(volDiscs) == (
		volumeDiscounts := volDiscs;
	);
	
	-- Remove from stock in products with color
	public removeFromStock: Color * Quantity ==> ()
	removeFromStock(color, qty) == (
		quantities := quantities ++ {color |-> (quantities(color) - qty)};
	)
	pre color in set colors
		and qty <= quantities(color);
	
	-- Add to stock in products with color
	public addToStock: Color * Quantity ==> ()
	addToStock(color, qty) == (
		quantities := quantities ++ {color |-> (quantities(color) + qty)};
	)
	pre color in set colors;
	
	-- Get price with discount applied
	public getPriceWithDiscount: Quantity ==> Price 
	getPriceWithDiscount(qty) == (
		dcl discountedPrice : Price := price;
		if volumeDiscounts <> { |-> }
		then (
			for all quantity in set dom volumeDiscounts
				do (
					if (qty >= quantity and discountedPrice > volumeDiscounts(quantity))
					then discountedPrice := volumeDiscounts(quantity);
				);
			);
		return discountedPrice;
	)
	post RESULT <= price;

end Product
