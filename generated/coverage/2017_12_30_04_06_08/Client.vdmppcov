class Client

types
	public Email = seq of char;
	public Cart = map (Product * Product`Color) to nat1;
	public Wishlist = set of (Product * Product`Color);
	
instance variables
  public cart: Cart  := { |-> };
  public wishlist: Wishlist := {};
  public email: Email;
  public buyHistory : seq of Cart := [];
  
operations
	public Client : Email ==> Client
	Client(e) == (
		email := e;
	  return self
	);
	
	-- Add product to wishlist
	public addToWishlist: Product * Product`Color ==> ()
	addToWishlist(product, color) == (
		wishlist := wishlist union { mk_(product, color) };
	)
	pre mk_(product, color) not in set wishlist;
	
	-- Remove product from wishlist
	public removeFromWishlist: Product * Product`Color ==> ()
	removeFromWishlist(product, color) == (
		wishlist := wishlist \ {mk_(product, color)};
	)
	pre mk_(product, color) in set wishlist;
	
	-- Add product to cart
	public addToCart: Product * Product`Color ==> ()
	addToCart(product, color) == (
		cart := cart munion { mk_(product, color) |-> 1 };
	)
	pre mk_(product, color) not in set dom cart;
	
	-- Remove product from cart specific color
	public removeFromCart: Product * Product`Color ==> ()
	removeFromCart(product, color) == (
		cart := {mk_(product, color)} <-: cart;
	)
	pre mk_(product, color) in set dom cart;
	
	-- Set product quantity in cart
	public setQtyInCart: Product * Product`Color * Product`Quantity ==> ()
	setQtyInCart(product, color, qty) == (
		cart := cart ++ { mk_(product, color) |-> qty };
	)
	pre mk_(product, color) in set dom cart
		and qty > 0;

end Client
