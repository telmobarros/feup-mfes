class BuyInPortugal
types
	public Category = seq of char;
	public Subcategory = seq of char;
	public AdminCode = seq of char;

instance variables
	public categories : set of Category := {};
	public subcategories : map Subcategory to Category := { |-> };
	public manufacturers : map Manufacturer`Name to Manufacturer := { |-> };
	public products : map Product`Title to Product := { |-> };
	public clients : map Client`Email to Client := { |-> };
	
	public adminCode : AdminCode := [];
	
	-- subcategories should be associated with category
  inv rng subcategories subset categories;

operations
	/** ADMIN OPERATIONS **/
	
	public BuyInPortugal: () ==> BuyInPortugal
	BuyInPortugal() ==
		return self;
	
	-- Change admin password
	public setAdminCode: AdminCode * AdminCode ==> ()
	setAdminCode(curCode, nextCode) ==
		adminCode := nextCode
	pre curCode <> nextCode
		and curCode = adminCode;
	
	-- Register manufacturer
	public registerManufacturer: Manufacturer`Name * AdminCode ==> ()
	registerManufacturer(name, code) == (
		dcl m:Manufacturer := new Manufacturer(name);
		addManufacturer(m);
	)
	pre name not in set dom manufacturers
		and code = adminCode
	post dom manufacturers = dom manufacturers~ union {name};

	private addManufacturer: Manufacturer ==> ()
	addManufacturer(m) == (
		manufacturers := manufacturers munion { m.name |-> m };
	);
	
	-- Add category
	public addCategory: Category * AdminCode ==> ()
	addCategory(category, code) == (
		categories := categories union {category};
	)
	pre category not in set categories
		and code = adminCode
	post categories = categories~ union {category};
	
	-- Set categories
	public setCategories: set of Category * AdminCode ==> ()
	setCategories(cats, code) == (
		categories := cats;
	)
	pre code = adminCode;
	
	-- Add subCategories
	public addSubcategory: Subcategory * Category * AdminCode ==> ()
	addSubcategory(subcategory, category, code) == (
		subcategories := subcategories munion {subcategory |-> category};
	)
	pre subcategory not in set dom subcategories
		and category in set categories
		and code = adminCode
	post dom subcategories = dom subcategories~ union {subcategory};
	
	-- Set subCategories
	public setSubcategories: map Subcategory to Category * AdminCode ==> ()
	setSubcategories(subcats, code) == (
		subcategories := subcats;
	)
	pre code = adminCode;
	
	/** ADMIN OPERATIONS END **/
	
	
	/** MANUFACTURER OPERATIONS **/
	
	-- Add product
	public addProduct: Manufacturer`Name * Product`Title * Product`Description * Product`Subcategory * Product`Price * map Product`Color to Product`Quantity ==> ()
	addProduct(manName, tit, des, cat, pr, qties) == (
		dcl product : Product := new Product(tit, des, cat, pr, qties);
		let manufacturer = manufacturers(manName)
			in (
				manufacturer.addProduct(product);
				products := products munion {tit |-> product};
			);
			return;
	)
	pre manName in set dom manufacturers
		and tit not in set dom products
		and cat in set dom subcategories
	post dom products = dom products~ union {tit};
	
	-- Remove product
	public removeProduct: Manufacturer`Name * Product`Title ==> ()
	removeProduct(manName, title) == (
		let manufacturer = manufacturers(manName)
			in (
				manufacturer.removeProduct(title);
				products := {title} <-: products;
				for all client in set rng clients
				do (
					for all mk_(t, color) in set client.wishlist
					do (
						if t = title then client.removeFromWishlist(t, color);
					);
					for all mk_(t, color) in set dom client.cart
					do (
						if t = title then client.removeFromCart(t, color);
					);
				);
		);
	)
	pre manName in set dom manufacturers
		and title in set dom products
	post dom products = dom products~ \ {title};
	
	-- Add to stock of a product
	public addToStock: Manufacturer`Name * Product`Title * Product`Color * Product`Quantity ==> ()
	addToStock(manName, title, color, qty) == (
		let product = products(title)
		in (
			product.addToStock(color, qty);
		);
	)
	pre title in set dom manufacturers(manName).products;
	
	-- Remove from stock of a product
	public removeFromStock: Manufacturer`Name * Product`Title * Product`Color * Product`Quantity ==> ()
	removeFromStock(manName, title, color, qty) == (
		let product = products(title)
		in (
			product.removeFromStock(color, qty);
		);
	)
	pre title in set dom manufacturers(manName).products;
	
		-- Set volume discounts
	public setVolumeDiscounts : Manufacturer`Name * Product`Title * Product`VolumeDiscounts ==> ()
	setVolumeDiscounts(manName, title, volDiscs) == (
	let product = products(title)
		in (
			product.setVolumeDiscounts(volDiscs);
		);
	)
	pre title in set dom manufacturers(manName).products;
	
	/** MANUFACTURER OPERATIONS END **/


	/** CLIENT OPERATIONS **/
	
	-- Add to wishlist of a client
	public addToWishlist: Client`Email * Product`Title * Product`Color ==> ()
	addToWishlist(email, title, color) == (
		let client = clients(email)
		in (
			client.addToWishlist(title, color);
		);
	);
	
	-- Remove from wishlist of a client
	public removeFromWishlist: Client`Email * Product`Title * Product`Color ==> ()
	removeFromWishlist(email, title, color) == (
		let client = clients(email)
		in (
			client.removeFromWishlist(title, color);
		);
	);
	
	-- Add to cart of a client
	public addToCart: Client`Email * Product`Title * Product`Color ==> ()
	addToCart(email, title, color) == (
		let client = clients(email)
		in (
			client.addToCart(title, color);
		);
	);
	
	-- Set quantity from cart product of a client
	public setQtyInCart: Client`Email * Product`Title * Product`Color * Product`Quantity ==> ()
	setQtyInCart(email, title, color, qty) == (
		let client = clients(email)
		in (
			client.setQtyInCart(title, color, qty);
		);
	);
	
	-- Remove from cart of a client
	public removeFromCart: Client`Email * Product`Title * Product`Color ==> ()
	removeFromCart(email, title, color) == (
		let client = clients(email)
		in (
			client.removeFromCart(title, color);
		);
	);
	
	-- Get total cart value
	public getTotalCart: Client`Email ==> rat
	getTotalCart(email) == (
		dcl sum: rat := 0;
		let client = clients(email), cart = client.cart
		in (
			for all mk_(title, color) in set dom cart
				do (let qty = cart(mk_(title, color))
					in sum := sum + products(title).getPriceWithDiscount(qty) * qty;
				);
			return sum;
		);
	)
	pre email in set dom clients;
	
	-- Buy cart from client
	public buy: Client`Email ==> ()
	buy(email) == (
		let client = clients(email), cart = client.cart
		in (
			for all mk_(title, color) in set dom cart
				do (
					products(title).removeFromStock(color, cart(mk_(title, color)))
				);
			client.pushCartToHistory();
		);
	)
	pre let client = clients(email), cart = client.cart
		in (
			forall mk_(title, color) in set dom cart
				& cart(mk_(title, color)) <= products(title).quantities(color)
		);
	
	-- Convert wishlist of a client
	public convertWishlist: Client`Email ==> ()
	convertWishlist(email) == (
		let client = clients(email)
		in (
			client.convertWishlist();
		);
	);
	
	/** CLIENT OPERATIONS END **/
	
	
	/** VISITOR OPERATIONS **/
	
	-- Register client
	public registerClient: Client`Email ==> ()
	registerClient(email) == (
	dcl c:Client := new Client(email);
		addClient(c);
	)
	pre email not in set dom clients
	post dom clients = dom clients~ union {email};

	private addClient: Client ==> ()
	addClient(c) == (
		clients := clients munion { c.email |-> c };
	);
	
	-- Get product by title
	public searchProductsByTitle: Product`Title ==> Product
	searchProductsByTitle(title) == (
		dcl product: Product;
		product := products(title);
		return product;
	);
	
		-- Get products by manufacturer
	public searchProductsByManufacturer: Manufacturer`Name ==> set of Product
	searchProductsByManufacturer(man) == (
		dcl resultPoducts: set of Product := {};
		resultPoducts := rng manufacturers(man).products;
		return resultPoducts;
	)
	pre man in set dom manufacturers;
	
	-- Get products by subcategory
	public searchProductsBySubcategory: Subcategory ==> set of Product
	searchProductsBySubcategory(subcat) == (
		dcl resultProducts: set of Product := {};
		for all product in set rng products
			do (
				if product.subcategory = subcat
				then resultProducts := resultProducts union {product};
			);
		return resultProducts;
	)
	pre subcat in set dom subcategories;
	
	
	-- Get products by category
	public searchProductsByCategory: Category ==> set of Product
	searchProductsByCategory(cat) == (
		dcl resultProducts: set of Product := {};
		for all product in set rng products
			do (
				if subcategories(product.subcategory) = cat
				then resultProducts := resultProducts union {product};
			);
		return resultProducts;
	)
	pre cat in set categories;
	/** VISITOR OPERATIONS END **/
	
end BuyInPortugal