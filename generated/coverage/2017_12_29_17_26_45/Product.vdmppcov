class Product

types
	public Title = seq of char;
	public Description = seq of char;
	public Subcategory = seq of char;
	public VolumeDiscounts =  map Quantity to Price;
	public Quantity = nat;
	public Price = rat;
	public Color = <White> | <Blue> | <Pink> | <Yellow> | <Orange> | <Black> | <Purple> | <Brown> | <Green> | <Gray> | <Red> | <None> ;
	
instance variables
  public title: Title;
  public description: Description;
  public price: Price;
  public subcategory: Subcategory;
  public quantities: map Color to Quantity := { <None> |-> 0};
  public volumeDiscounts: VolumeDiscounts := { |-> };
  public colors: set of Color := {<None>};
  
  inv card colors > 1 <=> <None> not in set colors;
  inv dom quantities = colors;

operations
	public Product : Title * Description * Subcategory * Price * VolumeDiscounts  ==> Product
	Product(tit, des, cat, pr, volDisc) == (
		subcategory := cat;
	  title := tit;
	  description := des;
	  price := pr;
	  volumeDiscounts := volDisc;
	  return self
	);
	
	public Product : Title * Description * Subcategory * Price * VolumeDiscounts * map Color to Quantity * set of Color ==> Product
	Product(tit, des, cat, pr, volDisc, qties, cors) == (
		subcategory := cat;
	  title := tit;
	  description := des;
	  price := pr;
	  volumeDiscounts := volDisc;
	  quantities := qties;
	  colors := cors;
	  return self
	)
	pre <None> not in set cors;
	
	public removeFromStock: Quantity ==> map Color to Quantity
	removeFromStock(qty) == (
		quantities := quantities ++ {<None> |-> (quantities(<None>) - qty)};
		return quantities;
	)
	pre colors = {<None>}
		and qty <= quantities(<None>);

	public addToStock: Quantity ==> map Color to Quantity
	addToStock(qty) == (
		quantities := quantities ++ {<None> |-> (quantities(<None>) + qty)};
		return quantities;
	)
		pre colors = {<None>};
	
	public removeFromStock: Color * Quantity ==> map Color to Quantity
	removeFromStock(color, qty) == (
		quantities := quantities ++ {color |-> (quantities(color) - qty)};
		return quantities;
	)
	pre colors = {color}
		and qty <= quantities(color);

	public addToStock: Color * Quantity ==> map Color to Quantity
	addToStock(color, qty) == (
		quantities := quantities ++ {color |-> (quantities(color) + qty)};
		return quantities;
	)
	pre colors = {color};

end Product
